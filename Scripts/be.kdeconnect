#!/usr/bin/env python2
# -*- coding: utf-8 -*-

'''Usage: 
Create an entry in your be.shell config:

 [kdeconnect]
 Active=true
 Exec=python2 $HOME/path/to/be.kdeconnect
 PermittedCommands=dbus
 PollInterval=100000 ← temporary solution while the FiFo is not ready
 Type=Label  
 
Add the new applet to the Applets list in a vertical panel  - check the TABLE_WIDTH, TABLE_HEIGHT and NOTIFICATION_LENGTH 
FiFo version is on the way ;) 

CSS reference (see CSS_File var):
 .table {}
 #device-name {}
 #device-icon-cell {} 
 #device-action {}  /* the hyperlink containing the icon */
 #device-icon {}  /* the icon itself */
 #battery-header {}
 #battery-value {}
 #notification-header {}
 #notification {}
 #notification-close-button {}
NOTICE! CSS pseudo states will not work!'''

import dbus, os.path

localConfigDir = os.getenv('HOME') + '/.kde4/share/apps/be.shell/Themes/Dynamo/style.css.d/'
CSS_File = localConfigDir + 'kdeconnect.css'

COMPUTER_ICON = localConfigDir + 'background-images/kdeconnect.png'
TABLET_ICON = localConfigDir + 'background-images/kdeconnect.png'
SMARTPHONE_ICON = localConfigDir + 'background-images/kdeconnect.png'
ICON_SIZE = '32' 

TABLE_WIDTH = '360' 
TABLE_HEIGHT = '470' 
CELL_SPACING = '5' 
CELL_PADDING = '4' 
TABLE_BORDER = '0'

#Lenght of the notification string. NOTICE! This affects the size of the table aswell.

NOTIFICATION_LENGTH = 55

#################################################################################################################################
# -------------------------------------------- no user edits below this line -------------------------------------------------- #
#################################################################################################################################

#This is really an arbitrary solution for the notifications subtable width, so that the close button column will stay at its place
#despite the notification lenght might be shorter than expected. Blame me later

INNER_TABLE_WIDTH = str(int(TABLE_WIDTH)-int(TABLE_WIDTH)*2/10)

class Kdeconnect:
  
     def __init__(self, obj, path):
       self.obj = obj
       self.path = path
       self.properties = dbus.Interface(path, "org.freedesktop.DBus.Properties")
       self.iface = dbus.Interface(path, "org.kde.kdeconnect.device")
       self.notify_iface = dbus.Interface(path, "org.kde.kdeconnect.device.notifications")
       self.currentNotifications = self.notify_iface.get_dbus_method('activeNotifications')
       self.attributes = { 'id': '', 'name': '', 'icon': '' , 'charge': '', 'url': '' }
       
     def ID(self):
	self.attributes['id'] = device.properties.Get("org.kde.kdeconnect.device", "id")
	return self.attributes['id']
	
     def name(self):
        self.attributes['name'] = device.properties.Get("org.kde.kdeconnect.device", "name")
	return self.attributes['name']
      
     def icon(self):
        iconType = device.properties.Get("org.kde.kdeconnect.device", "iconName")
        if iconType == 'computer':
         self.attributes['icon'] = COMPUTER_ICON
        elif iconType == 'tablet':
         self.attributes['icon'] = TABLET_ICON
        else :
         self.attributes['icon'] = SMARTPHONE_ICON
	return self.attributes['icon']
      
     def battery(self):
       if self.path.hasPlugin('kdeconnect_battery') :
	 charge = self.path.get_dbus_method('charge')
	 if charge() == -1 :
	   self.attributes['charge'] = '100%'
	 else :
	   self.attributes['charge'] = str(charge()) + '%'
       else:
	 self.attributes['charge'] = '/'
       return self.attributes['charge']
     
     def sftp(self):
       if self.path.hasPlugin('kdeconnect_sftp'):
         self.attributes['url'] = 'session;org.kde.kdeconnect;/modules/kdeconnect/devices/' + self.ID() + '/sftp;org.kde.kdeconnect.device.sftp;startBrowsing'
       return self.attributes['url']
     
     def header(self):
       if self.currentNotifications() :
	 title = 'Notifications:'
       else:
	 title = ''
       return title
	 
     def notifications(self):
       out = []
       if self.path.hasPlugin('kdeconnect_notifications'):      
           for i in self.currentNotifications():
	     not_obj = bus.get_object('org.kde.kdeconnect', '/modules/kdeconnect/devices/' + self.ID() + '/notifications/' + i)
             notifications_iface = dbus.Interface(not_obj, 'org.freedesktop.DBus.Properties')
             notifications_AppName = notifications_iface.Get("org.kde.kdeconnect.device.notifications.notification", 'appName')
             notifications_Ticker = notifications_iface.Get("org.kde.kdeconnect.device.notifications.notification", 'ticker')
             dismiss = 'session;org.kde.kdeconnect;/modules/kdeconnect/devices/' + self.ID() + '/notifications/' + i + ';org.kde.kdeconnect.device.notifications.notification;dismiss'
             cell= str(notifications_AppName) + ': ' + notifications_Ticker 
             if len(cell) > NOTIFICATION_LENGTH:
	       cell = cell[:NOTIFICATION_LENGTH] + '...' 
	     #The following line implements a *fucking ugly* workaround
	     row = '<table width="' + INNER_TABLE_WIDTH + '" cellspacing="0"><tr><td id="notification" align="left">' + cell + '</td><td align="right"><a id="notification-close-button" href="dbus:' + dismiss + '">X</a></td></tr></table>'
             out.append(row.encode('ASCII', 'ignore'))
       return '<br/>'.join(str(item) for item in out)
     
     def get_out(self):
       outstring = ''
       if self.iface.isReachable() and self.iface.isPaired():
	 outstring = '<tr><td id="device-name" valign="top" align="left" colspan ="1" rowspan="1">' + self.name() + '&#58;</td><td align="right" id="device-icon-cell"><a id="device-action" href="dbus:' + self.sftp() + '"><img id="device-icon" align="right" valign="middle" src="' + self.icon() + '" height="' + ICON_SIZE + '"/></a></td></tr><tr><td id="battery-header" colspan="1"> Battery: </td><td id="battery-value" align="right">' + self.battery() + '</td></tr><tr><td id="notification-header" rowspan="1" colspan="2" valign="middle" align="center">' + self.header() + '</td></tr><tr><td colspan="2">' + self.notifications() + '</td></tr>' 
       return outstring
       
#################################################################################################################################

try:
  bus = dbus.SessionBus()
except DBusException:
  print "Can't connect to session"
        
kdeconnect = bus.get_object('org.kde.kdeconnect', '/modules/kdeconnect')
outList = []
outList.append('<html><head><link href="' + CSS_File + '" rel="stylesheet" type="text/css"></head><table class="table" width="' + TABLE_WIDTH + '" align="left" valign="top" border="' + TABLE_BORDER + '" height="' + TABLE_HEIGHT + '" cellspacing="' + CELL_SPACING + '" cellpadding="' + CELL_PADDING + '">')

for key in kdeconnect.devices() :
  if key :
   
   myDevice = bus.get_object('org.kde.kdeconnect', '/modules/kdeconnect/devices/' + key )
   device = Kdeconnect(kdeconnect, myDevice)
   outList.append(device.get_out())      
      
outList.append('</table></html>')
print '<br/>'.join(map(str, outList))
